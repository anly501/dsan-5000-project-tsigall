client_id = 29BtHHkcVmVjeZfAU5Mfbw
client_secret = m8eoqej8ylk3LLG-n6TE1irUHOtxGw
user_agent = TNS621
import praw
import config
from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
reddit = praw.Reddit(
client_id = config.client_id,
client_secret = config.client_secret,
user_agent = config.user_agent
)
config.client_id
subreddit = reddit.subreddit("nfl")
query = "4th down"
top_posts = subreddit.search(query, limit=100)
corpus = []
urls = []
for post in top_posts:
urls.append(post.permalink)
vectorizer=CountVectorizer()
Xs = vectorizer.fit_transform(corpus)
col_names=vectorizer.get_feature_names_out()
(config.client_id)
config_user.id
config.user_agent
subreddit = reddit.subreddit("nfl")
query = "4th down"
top_posts = subreddit.search(query, limit=100)
corpus = []
urls = []
for post in top_posts:
urls.append(post.permalink)
vectorizer=CountVectorizer()
Xs = vectorizer.fit_transform(corpus)
col_names=vectorizer.get_feature_names_out()
import praw
import config
from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
reddit = praw.Reddit(
client_id = 29BtHHkcVmVjeZfAU5Mfbw,
client_secret = config.client_secret,
user_agent = TNS621
)
import praw
import config
from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
reddit = praw.Reddit(
client_id = "29BtHHkcVmVjeZfAU5Mfbw",
client_secret = config.client_secret,
user_agent = "TNS621"
)
config.client_secret
client_secret = m8eoqej8ylk3LLG-n6TE1irUHOtxGw
config.user_agent
import config
config.client_id
import config.py
import config
config.client_id
user_agent = TNS622
import config
config.user_agent
import config as c
c.user_agent
user_agent = TNS622
import praw
import config as c
from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
c.user_agent
reddit = praw.Reddit("NFL")
)
import praw
from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
reddit = praw.Reddit("NFL")
import praw
from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
reddit = praw.Reddit("NFL")
os.getcwd()
os.getcwdb()
os.getcwd()
os.getcwd()
import os
os.getcwd()
import os
import praw
from sklearn.feature_extraction.text import CountVectorizer
import numpy as np
reddit = praw.Reddit("bot1")
os.getcwd()
reticulate::repl_python()
library(nflverse)
library(tidyverse)
library(ggplot2)
library(grid)
library(reticulate)
library(kableExtra)
use_condaenv("r-env")
options(scipen = 999)
reticulate::repl_python()
library(nflverse)
library(tidyverse)
library(ggplot2)
library(grid)
library(reticulate)
library(kableExtra)
use_condaenv("r-env")
options(scipen = 999)
reticulate::repl_python()
library(nflverse)
library(tidyverse)
library(ggplot2)
library(grid)
library(reticulate)
library(kableExtra)
library(seaborn)
install.packages("seaborn")
install.packages("sns")
library(nflverse)
library(tidyverse)
library(ggplot2)
library(grid)
library(reticulate)
library(kableExtra)
library(sns)
use_condaenv("r-env")
options(scipen = 999)
library(nflverse)
library(tidyverse)
library(ggplot2)
library(grid)
library(reticulate)
library(kableExtra)
use_condaenv("r-env")
options(scipen = 999)
raw_data <- load_4th_pbp(2022)
head(raw_data)
fourth_downs <- raw_data %>%
filter(!is.na(go_boost) & !is.na(go)) %>%
select(home_coach, away_coach, posteam_type, ydstogo, yardline_100, posteam, go_boost, go, epa)
head(fourth_downs)
names <- data.frame("Variable" = names(fourth_downs),
"Definition" = c("Home Team Coach",
"Away Team Coach",
"Offense Home or Away",
"Yards to Go",
"Yardline Relative to End Zone",
"Offense Team",
"Change in Win Probability if Conversion Attempted",
"Conversion Attempted (T/F)",
"Estimated Points Added as a Result of the Play"))
kable(names)
fourth_decisions <- fourth_downs %>%
mutate(should_go = if_else((go == 100 & go_boost > 0), 1, (if_else(go_boost < 0, -1, 0))),
shouldnt_go = if_else((go == 0 & go_boost < 0), 1, (if_else(go_boost > 0, -1, 0))),
coach = if_else(posteam_type == "home", home_coach, away_coach),) %>%
select(coach, ydstogo, yardline_100, go_boost, should_go, shouldnt_go, go, epa) %>%
group_by(coach) %>%
summarize(should_go = sum(should_go == 1) / (sum(should_go == 0 | should_go == 1)),
shouldnt_go = sum(shouldnt_go == 1) / (sum(shouldnt_go == 0 | shouldnt_go == 1)),
EPA = mean(epa),
count = n()) %>%
filter(count > 50)
head(fourth_decisions)
p <- ggplot(data = fourth_decisions, aes = (x = "should_go")) +
geom_histogram()
p <- ggplot(data = fourth_decisions, aes = (x = "should_go")) +
geom_histogram()
p
p <- ggplot(data = fourth_decisions, aes(x = "should_go")) +
geom_histogram()
p
p <- ggplot(data = fourth_decisions, aes(x = "should_go")) +
geom_histogram(binwidth = 0.1)
p
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 0.1)
p
library(nflverse)
library(tidyverse)
library(ggplot2)
library(grid)
library(reticulate)
library(kableExtra)
use_condaenv("r-env")
options(scipen = 999)
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 0.1)
p
library(nflverse)
library(tidyverse)
library(ggplot2)
library(grid)
library(reticulate)
library(kableExtra)
use_condaenv("r-env")
options(scipen = 999)
raw_data <- load_4th_pbp(2022)
head(raw_data)
fourth_downs <- raw_data %>%
filter(!is.na(go_boost) & !is.na(go)) %>%
select(home_coach, away_coach, posteam_type, ydstogo, yardline_100, posteam, go_boost, go, epa)
head(fourth_downs)
names <- data.frame("Variable" = names(fourth_downs),
"Definition" = c("Home Team Coach",
"Away Team Coach",
"Offense Home or Away",
"Yards to Go",
"Yardline Relative to End Zone",
"Offense Team",
"Change in Win Probability if Conversion Attempted",
"Conversion Attempted (T/F)",
"Estimated Points Added as a Result of the Play"))
kable(names)
fourth_decisions <- fourth_downs %>%
mutate(should_go = if_else((go == 100 & go_boost > 0), 1, (if_else(go_boost < 0, -1, 0))),
shouldnt_go = if_else((go == 0 & go_boost < 0), 1, (if_else(go_boost > 0, -1, 0))),
coach = if_else(posteam_type == "home", home_coach, away_coach),) %>%
select(coach, ydstogo, yardline_100, go_boost, should_go, shouldnt_go, go, epa) %>%
group_by(coach) %>%
summarize(should_go = sum(should_go == 1) / (sum(should_go == 0 | should_go == 1)),
shouldnt_go = sum(shouldnt_go == 1) / (sum(shouldnt_go == 0 | shouldnt_go == 1)),
EPA = mean(epa),
count = n()) %>%
filter(count > 50)
head(fourth_decisions)
reticulate::repl_python()
library(nflverse)
library(tidyverse)
library(ggplot2)
library(grid)
library(reticulate)
library(kableExtra)
use_condaenv("r-env")
options(scipen = 999)
source('data_cleaning.qmd')
source("data_cleaning.qmd")
library(nflverse)
raw_data <- load_4th_pbp(2022)
save(raw_data, file = "raw_nfl.Rdata")
load("raw_nfl.Rdata")
head(raw_data)
load("raw_nfl.Rdata")
head(raw_data)
save(fourth_decisions, fourth_downs, "clean_data.Rdata")
library(nflverse)
library(tidyverse)
library(ggplot2)
library(grid)
library(reticulate)
library(kableExtra)
use_condaenv("r-env")
options(scipen = 999)
load("raw_nfl.Rdata")
head(raw_data)
fourth_downs <- raw_data %>%
filter(!is.na(go_boost) & !is.na(go)) %>%
select(home_coach, away_coach, posteam_type, ydstogo, yardline_100, posteam, go_boost, go, epa)
head(fourth_downs)
names <- data.frame("Variable" = names(fourth_downs),
"Definition" = c("Home Team Coach",
"Away Team Coach",
"Offense Home or Away",
"Yards to Go",
"Yardline Relative to End Zone",
"Offense Team",
"Change in Win Probability if Conversion Attempted",
"Conversion Attempted (T/F)",
"Estimated Points Added as a Result of the Play"))
kable(names)
fourth_decisions <- fourth_downs %>%
mutate(should_go = if_else((go == 100 & go_boost > 0), 1, (if_else(go_boost < 0, -1, 0))),
shouldnt_go = if_else((go == 0 & go_boost < 0), 1, (if_else(go_boost > 0, -1, 0))),
coach = if_else(posteam_type == "home", home_coach, away_coach),) %>%
select(coach, ydstogo, yardline_100, go_boost, should_go, shouldnt_go, go, epa) %>%
group_by(coach) %>%
summarize(should_go = sum(should_go == 1) / (sum(should_go == 0 | should_go == 1)),
shouldnt_go = sum(shouldnt_go == 1) / (sum(shouldnt_go == 0 | shouldnt_go == 1)),
EPA = mean(epa),
count = n()) %>%
filter(count > 50)
head(fourth_decisions)
reticulate::repl_python()
save(fourth_decisions, fourth_downs, "clean_data.Rdata")
save(fourth_decisions, fourth_downs, file = "clean_data.Rdata")
library(nflverse)
raw_data <- load_4th_pbp(2022)
save(raw_data, file = "raw_nfl.Rdata")
library(nflverse)
library(tidyverse)
library(ggplot2)
library(grid)
library(reticulate)
library(kableExtra)
use_condaenv("r-env")
options(scipen = 999)
load("raw_nfl.Rdata")
head(raw_data)
fourth_downs <- raw_data %>%
filter(!is.na(go_boost) & !is.na(go)) %>%
select(home_coach, away_coach, posteam_type, ydstogo, yardline_100, posteam, go_boost, go, epa)
head(fourth_downs)
names <- data.frame("Variable" = names(fourth_downs),
"Definition" = c("Home Team Coach",
"Away Team Coach",
"Offense Home or Away",
"Yards to Go",
"Yardline Relative to End Zone",
"Offense Team",
"Change in Win Probability if Conversion Attempted",
"Conversion Attempted (T/F)",
"Estimated Points Added as a Result of the Play"))
kable(names)
fourth_decisions <- fourth_downs %>%
mutate(should_go = if_else((go == 100 & go_boost > 0), 1, (if_else(go_boost < 0, -1, 0))),
shouldnt_go = if_else((go == 0 & go_boost < 0), 1, (if_else(go_boost > 0, -1, 0))),
coach = if_else(posteam_type == "home", home_coach, away_coach),) %>%
select(coach, ydstogo, yardline_100, go_boost, should_go, shouldnt_go, go, epa) %>%
group_by(coach) %>%
summarize(should_go = sum(should_go == 1) / (sum(should_go == 0 | should_go == 1)),
shouldnt_go = sum(shouldnt_go == 1) / (sum(shouldnt_go == 0 | shouldnt_go == 1)),
EPA = mean(epa),
count = n()) %>%
filter(count > 50)
head(fourth_decisions)
reticulate::repl_python()
library(nflverse)
library(tidyverse)
library(ggplot2)
library(grid)
library(reticulate)
library(kableExtra)
use_condaenv("r-env")
options(scipen = 999)
load("clean_data.Rdata")
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 0.1)
p
p <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = should_go, y = ..density..))
p
p <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = should_go, y = after_stat(density)))
p
p <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = should_go, y = after_stat(density), fill = "#69b3a2"))
p
p <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = should_go, y = after_stat(density), fill = "#69b3a2")) +
geom_density(aes(x = shouldnt_go, y = -after_stat(density), fill = "#404080"))
p
library(gridExtra)
grid.align(p, p1, ncol = 2)
p1 <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = shouldnt_go, y = after_stat(density), fill = "#404080"))
grid.align(p, p1, ncol = 2)
grid.arrange(p, p1, ncol = 2)
p <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = should_go, y = after_stat(density), fill = "#69b3a2"))
p1 <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = shouldnt_go, y = after_stat(density), fill = "#404080"))
grid.arrange(p, p1, ncol = 2)
p <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = should_go, y = after_stat(density), fill = "#69b3a2")) +
scale_x_continuous(limits = c(0,1))
p1 <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = shouldnt_go, y = after_stat(density), fill = "#404080")) +
scale_x_continuous(limits = c(0,1))
grid.arrange(p, p1, ncol = 2)
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = should_go, y = after_stat(density), fill = "#69b3a2")) +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = shouldnt_go, y = after_stat(density), fill = "#404080")) +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Should Not") +
xlab("")
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_hist(aes(x = should_go, y = after_stat(density), fill = "#69b3a2")) +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_histogram(aes(x = should_go, y = after_stat(density), fill = "#69b3a2")) +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = shouldnt_go, y = after_stat(density), fill = "#404080")) +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Should Not") +
xlab("")
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(aes(fill = "#69b3a2")) +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = shouldnt_go, y = after_stat(density), fill = "#404080")) +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Should Not") +
xlab("")
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 15, fill = "#69b3a2") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = shouldnt_go, y = after_stat(density), fill = "#404080")) +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Should Not") +
xlab("")
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 0.2, fill = "#69b3a2") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = shouldnt_go, y = after_stat(density), fill = "#404080")) +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Should Not") +
xlab("")
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 0.1, fill = "#69b3a2") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = shouldnt_go, y = after_stat(density), fill = "#404080")) +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Should Not") +
xlab("")
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 0.1, fill = "#69b3a2", color="#e9ecef") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = x)) +
geom_density(aes(x = shouldnt_go, y = after_stat(density), fill = "#404080")) +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Should Not") +
xlab("")
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 0.1, fill = "#69b3a2", color="#e9ecef") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = shouldnt_go)) +
geom_histogram(binwidth = 0.1, fill = "#69b3a2", color="#e9ecef") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Shouldn't") +
xlab("")
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 0.1, fill = "#69b3a2", color="#e9ecef") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = shouldnt_go)) +
geom_histogram(binwidth = 0.01, fill = "#69b3a2", color="#e9ecef") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Shouldn't") +
xlab("")
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 0.01, fill = "#69b3a2", color="#e9ecef") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = shouldnt_go)) +
geom_histogram(binwidth = 0.01, fill = "#69b3a2", color="#e9ecef") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Shouldn't") +
xlab("")
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 0.05, fill = "#69b3a2", color="#e9ecef") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = shouldnt_go)) +
geom_histogram(binwidth = 0.01, fill = "#69b3a2", color="#e9ecef") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Shouldn't") +
xlab("")
grid.arrange(p, p1, ncol = 1)
p <- ggplot(data = fourth_decisions, aes(x = should_go)) +
geom_histogram(binwidth = 0.05, fill = "#69b3a2", color="#e9ecef") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Go When They Should") +
xlab("")
p1 <- ggplot(data = fourth_decisions, aes(x = shouldnt_go)) +
geom_histogram(binwidth = 0.05, fill = "#69b3a2", color="#e9ecef") +
scale_x_continuous(limits = c(0,1)) +
ggtitle("When NFL Coaches Don't Go When They Shouldn't") +
xlab("")
grid.arrange(p, p1, ncol = 1)
