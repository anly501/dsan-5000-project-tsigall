accuracy_gaussianNB = accuracy_score(y_true = y_test, y_pred = test_predictions)
import numpy as np
import pandas as pd
from sklearn.metrics import f1_score, accuracy_score
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
rng = np.random.default_rng(621)
df = pd.read_csv("df.csv")
belichick = df[df['coach'] == 'Bill Belichick']
belichick = belichick.drop(columns =['coach', 'punt_wp'])
belichick['random_guess'] = rng.choice([0,1], len(belichick))
f1_random = f1_score(belichick['go'], belichick['random_guess'])
f1_random
feature_matrix = belichick.drop(columns = ['go', 'random_guess'])
label_vec = belichick[['go']]
X_train, X_test, y_train, y_test = train_test_split(feature_matrix, label_vec, test_size=0.2, random_state=621)
model = GaussianNB()
model.fit(X_train, np.ravel(y_train))
test_predictions = model.predict(X_test)
f1_gaussianNB = f1_score(y_true = y_test, y_pred = test_predictions)
accuracy_gaussianNB = accuracy_score(y_true = y_test, y_pred = test_predictions)
f1_gaussianNB
accuracy_gaussianNB
f1_random = f1_score(belichick['go'], belichick['random_guess'])
accuracy_random = accuracy_score(belichick['go'], belichick['random_guess'])
metrics = pd.DataFrame({"Random Guessing" : [f1_random, accuracy_random]})
metrics
metrics = pd.DataFrame({"Metric" : ["F1 Score", "Accuracy Score"],
"Random Guessing" : [f1_random, accuracy_random]})
metrics
f1_random = f1_score(belichick['go'], belichick['random_guess'])
accuracy_random = accuracy_score(belichick['go'], belichick['random_guess'])
metrics = pd.DataFrame({"Metric" : ["F1 Score", "Accuracy Score"],
"Random Guessing" : [f1_random, accuracy_random]})
metrics
metrics["GaussianNB"] = [f1_gaussianNB, accuracy_gaussianNB]
metrics
feature_importance = model.theta_
# Print feature importance scores
print("Feature Importance (Likelihood Means):")
for feature, importance in enumerate(feature_importance[0]):
print(f"Feature {feature}: {importance:.4f}")
features = feature_matrix.columns.to_list()
features[1]
features[0]
feature_importance = model.theta_
features = feature_matrix.columns.to_list()
# Print feature importance scores
print("Feature Importance (Likelihood Means):")
for feature, importance in enumerate(feature_importance[0]):
print(importance)
feature_importance
enumerate(feature_importance[0])
print(features[i], importance)
feature_importance = model.theta_
features = feature_matrix.columns.to_list()
# Print feature importance scores
print("Feature Importance (Likelihood Means):")
for i, importance in enumerate(feature_importance[0]):
print(features[i], importance)
print(features[i], f"{importance:.4f}")
feature_importance = model.theta_
features = feature_matrix.columns.to_list()
# Print feature importance scores
print("Feature Importance (Likelihood Means):")
for i, importance in enumerate(feature_importance[0]):
print(features[i], f"{importance:.4f}")
feature_importance = model.theta_
features = feature_matrix.columns.to_list()
# Print feature importance scores
print("Feature Importance (Likelihood Means):")
for i, importance in enumerate(feature_importance[0]):
print(features[i], "-",  f"{importance:.4f}")
def train_coach_model(coach):
coach_df = df[df['coach'] == coach]
coach_df = coach_df.drop(columns =['coach', 'punt_wp'])
feature_matrix = coach_df.drop(columns = ['go'])
label_vec = coach_df[['go']]
X_train, X_test, y_train, y_test = train_test_split(feature_matrix, label_vec, test_size=0.2, random_state=621)
model = GaussianNB()
return model
return model
def train_coach_model(coach):
coach_df = df[df['coach'] == coach]
coach_df = coach_df.drop(columns =['coach', 'punt_wp'])
feature_matrix = coach_df.drop(columns = ['go'])
label_vec = coach_df[['go']]
X_train, X_test, y_train, y_test = train_test_split(feature_matrix, label_vec, test_size=0.2, random_state=621)
model = GaussianNB()
return model
staley_model = train_coach_model("Brandon Staley")
staley_model = train_coach_model("Brandon Staley")
model.fit(X_train, np.ravel(y_train))
test_predictions = model.predict(X_test)
f1_gaussianNB = f1_score(y_true = y_test, y_pred = test_predictions)
accuracy_gaussianNB = accuracy_score(y_true = y_test, y_pred = test_predictions)
f1_gaussianNB
accuracy_gaussianNB
staley_model = train_coach_model("Brandon Staley")
staley_model.fit(X_train, np.ravel(y_train))
test_predictions = staley_model.predict(X_test)
f1_gaussianNB = f1_score(y_true = y_test, y_pred = test_predictions)
accuracy_gaussianNB = accuracy_score(y_true = y_test, y_pred = test_predictions)
f1_gaussianNB
accuracy_gaussianNB
def train_coach_model(coach):
coach_df = df[df['coach'] == coach]
coach_df = coach_df.drop(columns =['coach', 'punt_wp'])
feature_matrix = coach_df.drop(columns = ['go'])
label_vec = coach_df[['go']]
X_train, X_test, y_train, y_test = train_test_split(feature_matrix, label_vec, test_size=0.2, random_state=621)
model = GaussianNB()
model.fit(X_train, np.ravel(y_train))
test_predictions = model.predict(X_test)
f1_gaussianNB = f1_score(y_true = y_test, y_pred = test_predictions)
accuracy_gaussianNB = accuracy_score(y_true = y_test, y_pred = test_predictions)
print(f1_gaussianNB, accuracy_gaussianNB)
return model
staley_model = train_coach_model("Brandon Staley")
staley_model = train_coach_model("Brandon Staley")
feature_importance = staley_model.theta_
features = feature_matrix.columns.to_list()
# Print feature importance scores
print("Feature Importance (Likelihood Means):")
for i, importance in enumerate(feature_importance[0]):
print(features[i], "-",  f"{importance:.4f}")
compare_coaches = pd.DataFrame({"Feature":feature_matrix.columns.to_list()})
feature_importance = staley_model.theta_
feature_importance
feature_importance[0]
def train_coach_model(coach):
coach_df = df[df['coach'] == coach]
coach_df = coach_df.drop(columns =['coach', 'punt_wp'])
feature_matrix = coach_df.drop(columns = ['go'])
label_vec = coach_df[['go']]
X_train, X_test, y_train, y_test = train_test_split(feature_matrix, label_vec, test_size=0.2, random_state=621)
model = GaussianNB()
model.fit(X_train, np.ravel(y_train))
test_predictions = model.predict(X_test)
f1_gaussianNB = f1_score(y_true = y_test, y_pred = test_predictions)
accuracy_gaussianNB = accuracy_score(y_true = y_test, y_pred = test_predictions)
metrics[coach] = [f1_gaussianNB, accuracy_gaussianNB]
compare_coaches[coach] = model.theta_[0]
return model
staley_model = train_coach_model("Brandon Staley")
belichick_model = train_coach_model("Bill Belichick")
metrics.drop(columns = ["Random Guessing", "GaussianNB"])
rivera_model = train_coach_model("Ron Rivera")
compare_coaches
metrics
compare_coaches
metrics.drop(columns = ["Random Guessing", "GaussianNB"], inplace = True)
stefanski_model = train_coach_model("Kevin Stefanski")
compare_coaches
compare_coaches.style.set_table_styles([{'selector': '', 'props': [('border', '2px solid black')]}])
compare_coaches
.relabel_index(["row 1", "row 2"], axis=0)
staley_model = train_coach_model("Brandon Staley")
belichick_model = train_coach_model("Bill Belichick")
rivera_model = train_coach_model("Ron Rivera")
stefanski_model = train_coach_model("Kevin Stefanski")
compare_coaches.style \
.format(precision=3, thousands=".", decimal=",") \
.format_index(str.upper, axis=1) \
.relabel_index(["row 1", "row 2"], axis=0)
.relabel_index(["row 1", "row 2"], axis=0)
staley_model = train_coach_model("Brandon Staley")
belichick_model = train_coach_model("Bill Belichick")
rivera_model = train_coach_model("Ron Rivera")
stefanski_model = train_coach_model("Kevin Stefanski")
compare_coaches.style \
.format(precision=3, thousands=".", decimal=",") \
.format_index(str.upper, axis=1) \
.relabel_index(["row 1", "row 2"], axis=0)
compare_coaches.style.set_table_styles([{'selector': '', 'props': [('border', '2px solid black')]}])
library(tidyverse)
library(kableExtra)
load("raw_nfl.Rdata")
df <- raw_data %>%
filter(!is.na(go_boost) & !is.na(go)) %>%
select(season, home_coach, away_coach, posteam, defteam, posteam_type, game_half, half_seconds_remaining, ydstogo, yardline_100, posteam_score, defteam_score, posteam, go_boost, go, epa, wp_fail, wp_succeed, wp, fg_make_prob, miss_fg_wp, make_fg_wp, punt_wp)
df <- df %>%
mutate(coach = if_else(posteam_type == "home", home_coach, away_coach),
home_coach = coach,
go = if_else(go == 100, 1, 0),
game_half = if_else(game_half == "Half1", 1, 2)) %>%
select(-coach,
-away_coach,
-season,
-posteam,
-defteam,
-posteam_type,
-epa) %>%
rename(coach = home_coach) %>%
select(-go, everything())
kable(head(df))
write_csv(df, file = "df.csv")
kable(head(df %>%
group_by(coach) %>%
summarize(count = n()) %>%
arrange(desc(count))))
reticulate::repl_python()
library(tidyverse)
library(kableExtra)
reticulate::repl_python()
library(tidyverse)
library(kableExtra)
load("raw_nfl.Rdata")
df <- raw_data %>%
filter(!is.na(go_boost) & !is.na(go)) %>%
select(season, home_coach, away_coach, posteam, defteam, posteam_type, game_half, half_seconds_remaining, ydstogo, yardline_100, posteam_score, defteam_score, posteam, go_boost, go, epa, wp_fail, wp_succeed, wp, fg_make_prob, miss_fg_wp, make_fg_wp, punt_wp)
df <- df %>%
mutate(coach = if_else(posteam_type == "home", home_coach, away_coach),
home_coach = coach,
go = if_else(go == 100, 1, 0),
game_half = if_else(game_half == "Half1", 1, 2)) %>%
select(-coach,
-away_coach,
-season,
-posteam,
-defteam,
-posteam_type,
-epa) %>%
rename(coach = home_coach) %>%
select(-go, everything())
kable(head(df))
write_csv(df, file = "df.csv")
library(tidyverse)
library(kableExtra)
kable(head(df %>%
group_by(coach) %>%
summarize(count = n()) %>%
arrange(desc(count))))
reticulate::repl_python()
library(tidyverse)
library(kableExtra)
reticulate::repl_python()
library(tidyverse)
library(kableExtra)
reticulate::repl_python()
library(tidyverse)
library(kableExtra)
reticulate::repl_python()
library(tidyverse)
library(kableExtra)
library(tidyverse)
library(kableExtra)
library(tidyverse)
library(kableExtra)
library(tidyverse)
library(kableExtra)
library(tidyverse)
library(kableExtra)
library(tidyverse)
library(kableExtra)
reticulate::repl_python()
library(tidyverse)
library(kableExtra)
reticulate::repl_python()
